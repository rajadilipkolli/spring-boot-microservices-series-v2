name: spring-boot-microservices-series-v2
services:
  postgresql:
    container_name: postgresql
    image: postgres:17-alpine
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    environment:
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=appdb
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: "pg_isready -U appuser -d appdb"
      interval: 2s
      timeout: 20s
      retries: 10
    networks:
      - microservice-network

  redis:
    container_name: redis
    image: 'redis:8.0.2-alpine'
    extra_hosts: ['host.docker.internal:host-gateway']
    ports:
      - '6379:6379'
    volumes:
      - 'redis_data:/data:rw'
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 5
    networks:
      - microservice-network

  zipkin-server:
    image: openzipkin/zipkin
    container_name: zipkin-server
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 512m
    expose:
      - "9411"
    ports:
      - "9411:9411"
    networks:
      - microservice-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9411/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  kafka:
    container_name: kafka
    image: apache/kafka-native:4.0.0
    hostname: broker
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CONTROLLER_QUORUM_MODE: 'kraft'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 32
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # Additional configurations to ensure state cleanup
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_AUTO_LEADER_REBALANCE_ENABLE: 'true'
    networks:
      - microservice-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.3.0
    command: [ 'start', '--import-realm', '--http-port=9191' ]
    container_name: keycloak
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    hostname: keycloak
    volumes:
      - ./realm-config:/opt/keycloak/data/import
    environment:
      # Admin credentials
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin1234
      # Database configuration for PostgreSQL
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgresql:5432/appdb
      - KC_DB_USERNAME=appuser
      - KC_DB_PASSWORD=secret
      - KC_DB_SCHEMA=public
      # Hostname and HTTP configuration
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
      # Additional production settings
      - KC_FEATURES=token-exchange
    ports:
      - "9191:9191"
    depends_on:
      postgresql:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 2gb
    healthcheck:
      test: ["CMD", "sh", "-c", "cat < /dev/null > /dev/tcp/localhost/9191 || exit 1"]
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 120s
    networks:
      - microservice-network

  config-server:
    container_name: config-server
    image: dockertmt/mmv2-config-server-21:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 700m
    ports:
      - "8888:8888"
    depends_on:
      zipkin-server:
        condition: service_healthy
    networks:
      - microservice-network
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_SECURITY_USER_NAME: docker-dev
      SPRING_SECURITY_USER_PASSWORD: docker-pass

  naming-server:
    container_name: naming-server
    image: dockertmt/mmv2-service-registry-21:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 700m
    ports:
      - "8761:8761"
    networks:
      - microservice-network
    depends_on:
      config-server:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://docker-dev:docker-pass@config-server:8888/
    restart: unless-stopped

  api-gateway:
    container_name: api-gateway
    image: dockertmt/mmv2-api-gateway:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "8765:8765"
    networks:
      - microservice-network
    depends_on:
      config-server:
        condition: service_started
      naming-server:
        condition: service_started
      zipkin-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://docker-dev:docker-pass@config-server:8888/
      - SPRING_DATA_REDIS_HOST=redis
    restart: unless-stopped

  catalog-service:
    container_name: catalog-service
    image: dockertmt/mmv2-catalog-service:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "18080:18080"
    networks:
      - microservice-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      config-server:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://docker-dev:docker-pass@config-server:8888/
    restart: unless-stopped

  inventory-service:
    container_name: inventory-service
    image: dockertmt/mmv2-inventory-service:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "18081:18081"
    networks:
      - microservice-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      config-server:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://docker-dev:docker-pass@config-server:8888/
    restart: unless-stopped

  order-service:
    container_name: order-service
    image: dockertmt/mmv2-order-service:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "18282:18282"
    networks:
      - microservice-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      config-server:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://docker-dev:docker-pass@config-server:8888/
    restart: unless-stopped

  payment-service:
    container_name: payment-service
    image: dockertmt/mmv2-payment-service:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "18085:18085"
    networks:
      - microservice-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      config-server:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://docker-dev:docker-pass@config-server:8888/
    restart: unless-stopped

  retailstore-webapp:
    image: dockertmt/mmv2-retail-store-webapp:0.0.1-SNAPSHOT
    container_name: retailstore-webapp
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - RETAILSTORE_API_GATEWAY_URL=http://api-gateway:8765
      - OAUTH2_SERVER_URL=http://keycloak:9191
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://zipkin-server:9411
    ports:
      - "8080:8080"
    networks:
      - microservice-network
    depends_on:
      keycloak:
        condition: service_healthy
      naming-server:
        condition: service_started
      api-gateway:
        condition: service_started
      catalog-service:
        condition: service_started
      inventory-service:
        condition: service_started
      order-service:
        condition: service_started
      payment-service:
        condition: service_started
    restart: on-failure
    deploy:
      resources:
        limits:
          memory: 700m

networks:
  microservice-network:


volumes:
  redis_data:
  postgres_data:
    driver: local
