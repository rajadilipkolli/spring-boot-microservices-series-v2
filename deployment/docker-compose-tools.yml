name: spring-boot-microservices-series-v2
services:

  postgresql:
    container_name: postgresql
    image: postgres:17-alpine
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    environment:
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=appdb
    healthcheck:
      test: "pg_isready -U appuser -d appdb"
      interval: 2s
      timeout: 20s
      retries: 10
    ports:
      - "5432:5432"
    networks:
      - microservice-network

  pgadmin4:
    container_name: pgadmin4
    image: dpage/pgadmin4
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    environment:
      - PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org
      - PGADMIN_DEFAULT_PASSWORD=admin
    ports:
      - "5050:80"
    depends_on:
      postgresql:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microservice-network

  # mongodb:
  #   container_name: mongodb
  #   image: mongo:6.0.3
  #   extra_hosts: ['host.docker.internal:host-gateway']
  #   volumes:
  #     - mongo-data:/data/db/mongo
  #   ports:
  #     - "27017:27017"
  #   networks:
  #     - microservice-network

  redis:
    container_name: redis
    image: 'redis:7.4.2-alpine'
    extra_hosts: ['host.docker.internal:host-gateway']
    ports:
      - '127.0.0.1:6379:6379/tcp'
    volumes:
      - 'redis_data:/data:rw'
    healthcheck:
      test: redis-cli ping
      interval: 3s
      timeout: 5s
      retries: 5
    networks:
      - microservice-network

  kafka:
    container_name: kafka
    image: apache/kafka-native:4.0.0
    hostname: broker
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9092" ]
      interval: 30s
      timeout: 5s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CONTROLLER_QUORUM_MODE: 'kraft'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_NUM_PARTITIONS: 32
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    networks:
      - microservice-network

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    restart: "no"
    ports:
      - "19000:9000"
    environment:
      KAFKA_BROKERCONNECT: "broker:29092"
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservice-network

  keycloak:
    image: quay.io/keycloak/keycloak:26.2.0
    command: [ 'start-dev', '--import-realm', '--http-port=9191' ]
    container_name: keycloak
    hostname: keycloak
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    volumes:
      - ./realm-config:/opt/keycloak/data/import
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin1234
    ports:
      - "9191:9191"
    networks:
      - microservice-network
    deploy:
      resources:
        limits:
          memory: 2gb

  config-server:
    container_name: config-server
    image: dockertmt/mmv2-config-server-21:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 700m
    ports:
      - "8888:8888"
    depends_on:
      - tempo
    networks:
      - microservice-network
    environment:
      SPRING_PROFILES_ACTIVE: native
      SPRING_SECURITY_USER_NAME: dockerUser
      SPRING_SECURITY_USER_PASSWORD: dockerSecret
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"

  naming-server:
    container_name: naming-server
    image: dockertmt/mmv2-service-registry-21:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 700m
    ports:
      - "8761:8761"
    networks:
      - microservice-network
    depends_on:
      config-server:
        condition: service_started
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://dockerUser:dockerSecret@config-server:8888/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    restart: unless-stopped
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"

  api-gateway:
    container_name: api-gateway
    image: dockertmt/mmv2-api-gateway:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "8765:8765"
    healthcheck:
      test: curl -m 5 --silent --fail --request GET http://localhost:8765/actuator/health | jq --exit-status -n 'inputs | if has("status") then .status=="UP" else false end' > /dev/null || exit 1
      retries: 10
      interval: 20s
      timeout: 5s
      start_period: 40s
    networks:
      - microservice-network
    depends_on:
      - config-server
      - naming-server
      - tempo
      - loki
      - redis
      # - mongodb
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://dockerUser:dockerSecret@config-server:8888/
      - SPRING_DATA_REDIS_HOST=redis
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411/
    restart: unless-stopped
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"

  catalog-service:
    container_name: catalog-service
    image: dockertmt/mmv2-catalog-service:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "18080:18080"
    networks:
      - microservice-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      postgresql:
        condition: service_healthy
      loki :
        condition: service_started
      api-gateway:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://dockerUser:dockerSecret@config-server:8888/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    restart: unless-stopped
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"

  inventory-service:
    container_name: inventory-service
    image: dockertmt/mmv2-inventory-service:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "18081:18081"
    networks:
      - microservice-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE= docker
      - SPRING_CONFIG_IMPORT=configserver:http://dockerUser:dockerSecret@config-server:8888/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    restart: unless-stopped
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"

  order-service:
    container_name: order-service
    image: dockertmt/mmv2-order-service:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "18282:18282"
    networks:
      - microservice-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE= docker
      - SPRING_CONFIG_IMPORT=configserver:http://dockerUser:dockerSecret@config-server:8888/
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    restart: unless-stopped
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"

  payment-service:
    container_name: payment-service
    image: dockertmt/mmv2-payment-service:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 1400m
    ports:
      - "18085:18085"
    networks:
      - microservice-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CONFIG_IMPORT: configserver:http://dockerUser:dockerSecret@config-server:8888/
      MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://tempo:9411
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    restart: unless-stopped

  retailstore-webapp:
    image: dockertmt/mmv2-retail-store-webapp:0.0.1-SNAPSHOT
    container_name: retailstore-webapp
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - RETAILSTORE_API_GATEWAY_URL=http://api-gateway:8765
      - OAUTH2_SERVER_URL=http://keycloak:9191
      - MANAGEMENT_ZIPKIN_TRACING_ENDPOINT=http://tempo:9411
    ports:
      - "8080:8080"
    networks:
      - microservice-network
    deploy:
      resources:
        limits:
          memory: 700m
    labels:
      logging: "promtail"
      logging_jobname: "containerlogs"
    restart: unless-stopped


  ## Observability
  grafana:
    image: grafana/grafana:11.6.0
    container_name: grafana
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    depends_on:
      - loki
      - prometheus
      - tempo
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=user
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./config/grafana/provisioning/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
      - ./config/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./config/grafana/grafana.ini:/etc/grafana/grafana.ini
    networks:
      - microservice-network

  loki:
    image: grafana/loki:3.5.0
    container_name: loki
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    networks:
      - microservice-network

  promtail:
    image: grafana/promtail:3.5.0
    container_name: promtail
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    volumes:
      - ./config/promtail/promtail.yml:/etc/promtail/config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - microservice-network

  prometheus:
    image: prom/prometheus:v3.3.0
    container_name: prometheus
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command:
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./config/prometheus/config/alert-rules.yml:/etc/prometheus/alert-rules.yml
    networks:
      - microservice-network

  tempo:
    image: grafana/tempo:2.7.2
    container_name: tempo
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: -config.file /etc/tempo-config.yml
    ports:
      - "3110:3100" # Tempo
      - "4317:4317" # OTLP
      - "9411:9411" # Zipkin
    volumes:
      - ./config/tempo/tempo.yml:/etc/tempo-config.yml
    networks:
      - microservice-network

  alertmanager:
    image: prom/alertmanager:v0.28.1
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./config/alert-manager/tmp:/data
      - ./config/alert-manager/config:/config
    command: --config.file=/config/alertmanager.yml --log.level=debug
    networks:
      - microservice-network

networks:
  microservice-network:

volumes:
  # mongo-data:
  redis_data:
  postgres_data:
    driver: local

