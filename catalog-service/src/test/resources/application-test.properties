spring.webflux.problemdetails.enabled=true

spring.config.import=optional:configserver:http://localhost:8888/

management.tracing.sampling.probability=1.0

#313
spring.cloud.discovery.enabled=false
spring.threads.virtual.enabled=true


resilience4j.bulkhead.instances.default.maxConcurrentCalls=20
resilience4j.bulkhead.instances.default.maxWaitDuration=10ms
resilience4j.bulkhead.instances.product-api.maxConcurrentCalls=10
resilience4j.ratelimiter.instances.default.limitForPeriod=10
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s
resilience4j.ratelimiter.instances.default.timeoutDuration=3s
resilience4j.ratelimiter.instances.default.registerHealthIndicator=true
#resilience4j.retry.retryAspectOrder=2
resilience4j.retry.instances.product-api.enableExponentialBackoff=true
resilience4j.retry.instances.product-api.exponentialBackoffMultiplier=2
resilience4j.retry.instances.product-api.maxAttempts=3
resilience4j.retry.instances.product-api.waitDuration=1s
#resilience4j.circuitbreaker.circuitBreakerAspectOrder=1
resilience4j.circuitbreaker.instances.default.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.default.slidingWindowSize=5
resilience4j.circuitbreaker.instances.default.minimumNumberOfCalls=2
resilience4j.circuitbreaker.instances.default.failureRateThreshold=100
resilience4j.circuitbreaker.instances.default.permittedNumberOfCallsInHalfOpenState=2
resilience4j.circuitbreaker.instances.default.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.circuitbreaker.instances.getInventoryByProductCodes.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.getInventoryByProductCodes.slidingWindowSize=10
resilience4j.circuitbreaker.instances.getInventoryByProductCodes.permittedNumberOfCallsInHalfOpenState=2
resilience4j.circuitbreaker.instances.getInventoryByProductCodes.automaticTransitionFromOpenToHalfOpenEnabled=true
resilience4j.timelimiter.instances.default.timeoutDuration=10s
resilience4j.timelimiter.instances.default.cancelRunningFuture=true


## adding kafka consumer to test sending and receiving of message
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.LongDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
