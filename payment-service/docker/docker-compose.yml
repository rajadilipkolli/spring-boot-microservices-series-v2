services:

  postgresql:
    container_name: postgresql
    image: postgres:18-alpine
    environment:
      - POSTGRES_USER=appuser
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=appdb
    ports:
      - "5432:5432"
    healthcheck:
      test: "pg_isready -U appuser -d appdb"
      interval: 2s
      timeout: 20s
      retries: 10
    networks:
      - payment-network

  zipkin-server:
    image: openzipkin/zipkin
    container_name: zipkin-server
    deploy:
      resources:
        limits:
          memory: 512m
    expose:
      - "9411"
    ports:
      - "9411:9411"
    networks:
      - payment-network

  kafka:
    image: apache/kafka-native:4.1.0
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost 9092" ]
      interval: 30s
      timeout: 5s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CONTROLLER_QUORUM_MODE: 'kraft'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
    networks:
      - payment-network

  config-server:
    container_name: config-server
    image: dockertmt/mmv2-config-server-21:0.0.1-SNAPSHOT
    deploy:
      resources:
        limits:
          memory: 700m
    ports:
      - "8888:8888"
    depends_on:
      zipkin-server:
        condition: service_started
    networks:
      - payment-network
    environment:
      SPRING_PROFILES_ACTIVE: native

  catalog-service:
    container_name: catalog-service
    image: dockertmt/mmv2-catalog-service:0.0.1-SNAPSHOT
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    deploy:
      resources:
        limits:
          memory: 700m
    ports:
      - "18080:18080"
    networks:
      - payment-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE= docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888/
    restart: unless-stopped

  naming-server:
    container_name: naming-server
    image: dockertmt/mmv2-service-registry-21:0.0.1-SNAPSHOT
    deploy:
      resources:
        limits:
          memory: 700m
    ports:
      - "8761:8761"
    networks:
      - payment-network
    depends_on:
      config-server:
        condition: service_started
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888/
    restart: unless-stopped

  inventory-service:
    container_name: inventory-service
    image: dockertmt/mmv2-inventory-service:0.0.1-SNAPSHOT
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "18181:18181"
    networks:
      - payment-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE= docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888/
    restart: unless-stopped

  order-service:
    container_name: order-service
    image: dockertmt/mmv2-order-service:0.0.1-SNAPSHOT
    deploy:
      resources:
        limits:
          memory: 1050m
    ports:
      - "18282:18282"
    networks:
      - payment-network
    depends_on:
      kafka:
        condition: service_healthy
      naming-server:
        condition: service_started
      postgresql:
        condition: service_healthy
    environment:
      - SPRING_PROFILES_ACTIVE= docker
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888/
    restart: unless-stopped

networks:
  payment-network:
